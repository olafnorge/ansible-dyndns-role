---
- name: assert required variables are set and have reasonable values
  assert:
    that:
      - (dyndns_olafnorge_de_labels | length) > 0
      - (dyndns_olafnorge_de_network_definitions | length) > 0
      - (dyndns_olafnorge_de_networks | length) > 0
      - dyndns_olafnorge_de_environment is defined
      - dyndns_olafnorge_de_environment.app_key is defined
      - (dyndns_olafnorge_de_environment.app_key | length) > 0
      - dyndns_olafnorge_de_environment.db_password is defined
      - (dyndns_olafnorge_de_environment.db_password | length) > 0
      - dyndns_olafnorge_de_environment.rollbar_enabled is defined
      - (not (dyndns_olafnorge_de_environment.rollbar_enabled)) or
        (
        (dyndns_olafnorge_de_environment.rollbar_enabled) and
        (dyndns_olafnorge_de_environment.rollbar_token is defined) and
        ((dyndns_olafnorge_de_environment.rollbar_token | length) > 0)
        )

- name: create secrets for dyndns.example.com
  docker_secret:
    data: "{{ item.value.data }}"
    name: "{{ item.value.name }}"
    state: present
  no_log: yes
  with_dict: "{{ dyndns_olafnorge_de_secrets }}"
  when: dyndns_olafnorge_de_use_secrets

- name: write crontab skeleton
  template:
    dest: "{{ dyndns_olafnorge_de_crontab_path }}"
    mode: 0600
    src: crontab.j2
  register: dyndns_olafnorge_de_crontab_templated

- name: register dynamic name of crontab skeleton
  set_fact:
    dyndns_olafnorge_de_configs_dict: "{'dyndns-crontab-{{ dyndns_olafnorge_de_crontab_templated.checksum[:10] }}':{'file':'{{ dyndns_olafnorge_de_crontab_path }}'}}"

- name: spawn dyndns.example.com service
  docker_stack:
    compose:
      - "{{ dyndns_olafnorge_de_compose }}"
    name: "{{ dyndns_olafnorge_de_name }}"
    prune: yes
    state: present
